/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";

import * as THREE from "three";
import { useCustomization } from "../contexts/Customization";
import {useFrame} from "@react-three/fiber";

/*
 ** CHAIR MATERIALS
 */


function Sofa(props) {
  const searchParams = new URLSearchParams(document.location.search);
  const param1 = searchParams.get('__name');
  
  const { nodes, materials } = useGLTF("./models/"+param1+".gltf");
  const { material, sofaShade, activeFabric, activeTexture, fabricColor } = useCustomization();

  const leatherTextureProps = useTexture({
    // map: "./textures/leather/Leather_008_Base Color.jpg",
    normalMap: "./textures/leather/Leather_008_Normal.jpg",
    roughnessMap: "./textures/leather/Leather_008_Roughness.jpg",
    aoMap: "./textures/leather/Leather_008_Ambient Occlusion.jpg", 
  });

  const fabricTextureProps = useTexture({
    map: "./textures/fabric/"+activeTexture.replace(/\s+/g, '-').toLowerCase()+".jpg",
    //normalMap: "./textures/fabric/"+activeTexture.toLowerCase().replace(" ", "-")+"-normal.jpg",
    //roughnessMap: "./textures/fabric/"+activeTexture.toLowerCase().replace(" ", "-")+"-roughness.jpg",
    aoMap: "./textures/fabric/"+activeTexture.replace(/[0-9]{1,2}/, '').replace(/\s+/g, '-').toLowerCase()+"AO.jpg",
  });

  // leatherTextureProps.map.repeat.set(3, 3);
  leatherTextureProps.normalMap.repeat.set(3, 3);
  leatherTextureProps.roughnessMap.repeat.set(3, 3);
  leatherTextureProps.aoMap.repeat.set(3, 3);
  // leatherTextureProps.map.wrapS = leatherTextureProps.map.wrapT =
  //   THREE.MirroredRepeatWrapping;
  leatherTextureProps.normalMap.wrapS = leatherTextureProps.normalMap.wrapT =
    THREE.MirroredRepeatWrapping;
  leatherTextureProps.roughnessMap.wrapS =
    leatherTextureProps.roughnessMap.wrapT = THREE.MirroredRepeatWrapping;
  leatherTextureProps.aoMap.wrapS = leatherTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;
 
  fabricTextureProps.map.repeat.set(15, 15);
  //fabricTextureProps.normalMap.repeat.set(3, 3);
  //fabricTextureProps.roughnessMap.repeat.set(3, 3);
  fabricTextureProps.aoMap.repeat.set(15, 15);
  fabricTextureProps.map.wrapS = fabricTextureProps.map.wrapT =
    THREE.RepeatWrapping;
  //fabricTextureProps.normalMap.wrapS = fabricTextureProps.normalMap.wrapT =
    //THREE.RepeatWrapping;
  //fabricTextureProps.roughnessMap.wrapS =
 //   fabricTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  fabricTextureProps.aoMap.wrapS = fabricTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;
  const objec = nodes;
  const nodebrowse = Object.values(objec);
  
    return (
    <group {...props} dispose={null}>
      {nodebrowse.map((obj, i) => { 

        if(i!==10){

          console.log(nodes[nodebrowse[i].name]);


          return(<mesh key={i} geometry={nodes[nodebrowse[i].name].geometry} castShadow={false}>
            <meshStandardMaterial
            {...(material === "leather"
              ? leatherTextureProps
              : fabricTextureProps)}
              color=
              {((typeof nodes[nodebrowse[i].name]["material"] != 'undefined') && (nodes[nodebrowse[i].name]["material"] !== "") && (nodes[nodebrowse[i].name]["material"]["name"] !== "LEGS") && (nodes[nodebrowse[i].name]["material"]["name"] !== "METAL")
              ? fabricColor.color
              : "black")}
            
          />
        </mesh>)
          
        }

        })}
      
    </group>
    
  );
}

export default Sofa;