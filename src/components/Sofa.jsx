/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";

import * as THREE from "three";
import { useCustomization } from "../contexts/Customization";

/*
 ** CHAIR MATERIALS
 */

function Sofa(props) {
  const { nodes, materials } = useGLTF("./models/cornersec.gltf");
  const { material, sofaShade, activeFabric, activeTexture, fabricColor } = useCustomization();

  const leatherTextureProps = useTexture({
    // map: "./textures/leather/Leather_008_Base Color.jpg",
    normalMap: "./textures/leather/Leather_008_Normal.jpg",
    roughnessMap: "./textures/leather/Leather_008_Roughness.jpg",
    aoMap: "./textures/leather/Leather_008_Ambient Occlusion.jpg",
  });

  const fabricTextureProps = useTexture({
    map: "./textures/fabric/"+activeTexture.replace(/\s+/g, '-').toLowerCase()+".jpg",
    //normalMap: "./textures/fabric/"+activeTexture.toLowerCase().replace(" ", "-")+"-normal.jpg",
    //roughnessMap: "./textures/fabric/"+activeTexture.toLowerCase().replace(" ", "-")+"-roughness.jpg",
    aoMap: "./textures/fabric/"+activeTexture.replace(/[0-9]{1,2}/, '').replace(/\s+/g, '-').toLowerCase()+"AO.jpg",
  });

  // leatherTextureProps.map.repeat.set(3, 3);
  leatherTextureProps.normalMap.repeat.set(3, 3);
  leatherTextureProps.roughnessMap.repeat.set(3, 3);
  leatherTextureProps.aoMap.repeat.set(3, 3);
  // leatherTextureProps.map.wrapS = leatherTextureProps.map.wrapT =
  //   THREE.MirroredRepeatWrapping;
  leatherTextureProps.normalMap.wrapS = leatherTextureProps.normalMap.wrapT =
    THREE.MirroredRepeatWrapping;
  leatherTextureProps.roughnessMap.wrapS =
    leatherTextureProps.roughnessMap.wrapT = THREE.MirroredRepeatWrapping;
  leatherTextureProps.aoMap.wrapS = leatherTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;
 
  fabricTextureProps.map.repeat.set(3, 3);
  //fabricTextureProps.normalMap.repeat.set(3, 3);
  //fabricTextureProps.roughnessMap.repeat.set(3, 3);
  fabricTextureProps.aoMap.repeat.set(3, 3);
  fabricTextureProps.map.wrapS = fabricTextureProps.map.wrapT =
    THREE.RepeatWrapping;
  //fabricTextureProps.normalMap.wrapS = fabricTextureProps.normalMap.wrapT =
    //THREE.RepeatWrapping;
  //fabricTextureProps.roughnessMap.wrapS =
 //   fabricTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  fabricTextureProps.aoMap.wrapS = fabricTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Box003.geometry} castShadow>
        <meshStandardMaterial
          {...(material === "leather"
            ? leatherTextureProps
            : fabricTextureProps)}
          color={fabricColor.color}
        />
      </mesh>
      <mesh geometry={nodes.Box008.geometry} castShadow>
        <meshStandardMaterial
          {...(material === "leather"
            ? leatherTextureProps
            : fabricTextureProps)}
            color="#000"
        />
      </mesh>
      <mesh geometry={nodes.Cylinder001.geometry} castShadow>
        <meshStandardMaterial
          {...(material === "leather"
            ? leatherTextureProps
            : fabricTextureProps)}
          color="#000"
        />
      </mesh>
      <mesh geometry={nodes.Cylinder002.geometry} castShadow>
        <meshStandardMaterial
          {...(material === "leather"
            ? leatherTextureProps
            : fabricTextureProps)}
            color="#000"
        />
      </mesh>
      <mesh geometry={nodes.Object024.geometry} castShadow>
        <meshStandardMaterial
          {...(material === "leather"
            ? leatherTextureProps
            : fabricTextureProps)}
          color={fabricColor.color}
        />
      </mesh>     
      
    </group>
    
  );
}

export default Sofa;

useGLTF.preload("./models/cornersec.gltf");
